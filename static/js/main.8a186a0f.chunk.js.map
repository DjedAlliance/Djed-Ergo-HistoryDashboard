{"version":3,"sources":["utils.ts"," jsstore_con.ts","DataService.ts","components/Footer.tsx","components/columns.ts","components/Toolbar.tsx","components/ProgressBar.tsx","components/ForkMe.tsx","components/MainChart.tsx","App.tsx","hooks/useTimeSeriesData.ts","reportWebVitals.ts","index.tsx"],"names":["nowDateRange","endTime","DateTime","now","toUTC","start","toDay","minus","hours","end","d","utc","year","month","day","todayUTC","toSlug","date","padStart","toString","JsStore","require","workerPath","default","connection","Connection","Worker","load","a","slug","url","process","fetch","resp","json","initDb","name","tables","columns","id","primaryKey","dataType","time","notNull","reserveRatio","stableCoinPrice","stableCoinRatio","reserveCoinPrice","reserveCoinRatio","rawDate","today","isToday","equals","nextDate","plus","days","minutes","select","from","where","low","toMillis","high","items","length","insert","into","upsert","values","map","i","fromISO","loadForDateRange","dates","Observable","subscriber","queue","PQueue","concurrency","on","next","error","addAll","loadForDate","then","is","complete","initialize","Footer","memo","addr","document","querySelector","content","tipAddress","includes","undefined","className","href","target","rel","columnTitles","stable","reserve","columnFormatter","v","Toolbar","props","pickerProps","column","onColumnChange","onRangeChange","onChange","format","value","e","c","ProgressBar","progress","dayCount","onComplete","color","onLoaderFinished","ForkMe","data-ribbon","title","MainChart","timeSeriesData","chartRowHeight","useState","tracked","setTracked","selection","setSelection","setMouse","timeRange","setTimeRange","useEffect","TimeRange","handleMouseMove","useCallback","x","y","handleTrackerChanged","t","handleSelectionChange","s","eventMarkerProps","useMemo","event","timeSeries","atTime","info","label","get","maxTime","maxDate","minTime","minDate","timeAxisAngledLabels","timeAxisHeight","onMouseMove","enablePanZoom","onTimeRangeChanged","onTrackerChanged","minDuration","height","min","max","width","type","axis","position","breakLine","series","onSelectionChange","interpolation","infoWidth","markerRadius","markerStyle","fill","NullMarker","firstRecord","App","data","setData","dateRange","setDateRange","setProgress","handleResetProgress","addNewData","dateDiff","diff","nums","range","n","subscribe","handleRangeChange","startDate","endDate","dr","fromJSDate","allItems","sortBy","Object","keys","reduce","all","divisor","Math","ceil","chartData","acc","item","index","dateTime","toJSDate","parseInt","round","parseFloat","points","f","TimeSeries","useTimeSeriesData","ref","useRef","setColumn","current","offsetHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8a186a0f.chunk.js","sourcesContent":["import { DateTime } from \"luxon\";\nimport { Slug } from \"./types\";\nimport padStart from 'lodash/padStart';\n\nexport function nowDateRange() {\n   const endTime =  DateTime.now().toUTC();\n   const startTime = endTime.minus({hours: 12});\n\n    return {\n        start: toDay(startTime), \n        end: toDay(endTime),\n    };\n}\n\nexport function toDay(d: DateTime): DateTime {\n    return DateTime.utc(d.year, d.month, d.day);\n}\n\nexport function todayUTC() {\n    const now = DateTime.now().toUTC();\n    return toDay(now);\n}\n\nexport function toSlug(date: DateTime): Slug {\n    const d = date.toUTC()\n    return `${d.year}-${padStart(d.month.toString(), 2, '0')}-${padStart(d.day.toString(), 2, '0')}`\n}\n","const JsStore = require('jsstore');\n\n/* eslint-disable */\n\n\nconst getWorkerPath = () => {\n\n    // return dev build when env is development\n    if (process.env.NODE_ENV === 'development') {\n\n        return require(\"file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.js\");\n\n    }\n    else { // return prod build when env is production\n\n        return require(\"file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.min.js\");\n\n    }\n};\n\nconst workerPath = getWorkerPath().default;\nexport const connection = new JsStore.Connection(new Worker(workerPath));","\nimport { DateTime } from \"luxon\";\nimport PQueue from \"p-queue/dist/index\";\nimport { Observable } from \"rxjs\"\nimport { connection } from \"./ jsstore_con\";\nimport { Item } from \"./types\";\nimport { todayUTC, toSlug } from \"./utils\";\n\nasync function load(date: DateTime): Promise<Item[]> {\n    const slug = toSlug(date);\n    const url = `${process.env.PUBLIC_URL}/data/daily/${slug}.json`\n    // TODO: validate against schema https://github.com/pelotom/runtypes ?\n    const resp = await fetch(url);\n    return await resp.json();\n}\n\nasync function initialize() {\n    await connection.initDb({\n        name: 'sigmausd',\n        tables: [\n            {\n                name: 'Items',\n                columns: {\n                    id: { primaryKey: true, dataType: \"number\" },\n                    time: { notNull: true, dataType: \"string\" },\n                    reserveRatio: { notNull: true, dataType: \"string\" },\n                    stableCoinPrice: { notNull: true, dataType: \"string\" },\n                    stableCoinRatio: { notNull: true, dataType: \"string\" },\n                    reserveCoinPrice: { notNull: true, dataType: \"string\" },\n                    reserveCoinRatio: { notNull: true, dataType: \"string\" },\n                }\n            },\n        ]\n    });\n\n};\n\ninitialize();\n\n\n\nexport async function loadForDate(rawDate: DateTime): Promise<Item[]> {\n    const date = rawDate.toUTC();\n    const today = todayUTC();\n    const isToday = today.equals(date)\n\n    if (!isToday) {\n        // check db\n        const nextDate = date.plus({ days: 1 }).minus({ minutes: 5 })\n\n        const items: Item[] = await connection.select({\n            from: \"Items\",\n            where: {\n                id: {\n                    '-': {\n                        low: date.toMillis(),\n                        high: nextDate.toMillis(),\n                    }\n                },\n            }\n        });\n\n        if (items.length > 0) {\n            return items;\n        }\n\n    }\n\n    const items = await load(date);\n\n    if (!isToday) {\n\n        await connection.insert({\n            into: 'Items',\n            upsert: true,\n            values: items.map(i => ({\n                ...i,\n                id: DateTime.fromISO(i.time).toMillis()\n            }))\n        })\n    }\n\n    return items;\n}\n\ntype DateRangeItems = [DateTime, Item[]]\n\nexport function loadForDateRange(dates: DateTime[]): Observable<DateRangeItems> {\n    return new Observable<DateRangeItems>(subscriber => {\n        const queue = new PQueue({ concurrency: 2 });\n        queue.on('completed', (items: DateRangeItems) => {\n            subscriber.next(items);\n        });\n        queue.on('error', error => {\n            subscriber.error(error);\n        });\n        queue.addAll(dates.map(date => (() => loadForDate(date).then(is => ([date, is] as const)))))\n            .then(() => subscriber.complete())\n    });\n};\n","import React, { memo } from 'react';\n\nexport const Footer = memo(() => {\n\n    const addr = document.querySelector<HTMLMetaElement>('meta[name=tip]')?.content;\n    const tipAddress = addr?.includes('REACT_APP_TIP') ? undefined : addr;\n\n    return (\n        <footer className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container-fluid\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <a href=\"http://sigmausd.io\" className=\"nav-link\" target=\"_blank\" rel=\"noreferrer\">sigmausd.io</a>\n                    </li>\n                </ul>\n                {tipAddress && <a href={`https://explorer.ergoplatform.com/en/addresses/${tipAddress}`} target=\"_blank\" rel=\"noreferrer\">&hearts; donations</a>}\n            </div>\n        </footer>\n    )\n});\n","\nexport const columns = ['reserveRatio', 'stable', 'reserve'] as const\n\nexport type ColumnTypes = typeof columns[number];\n\nexport const columnTitles = {\n  reserveRatio: 'Reserve Ratio (%)',\n  stable: 'SigmaUSD Ratio ($)',\n  reserve: 'SigmaRSV Ratio',\n} as const;\n\nexport const columnFormatter = {\n  reserveRatio: (v: string) => `${v} %`,\n  stable: (v: string) => `$${v}`,\n  reserve: (v: string) => v,\n} as const;\n","\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\nimport React, { memo } from 'react';\n\nimport {  PickerProps } from '../types';\nimport { ColumnTypes, columns, columnTitles } from './columns';\n\ntype ToolbarProps = {\n    pickerProps: PickerProps\n    column: ColumnTypes;\n    onColumnChange: (column: ColumnTypes) => void;\n    onRangeChange: (dateRange?: [Date, Date]) => void;\n};\n\nexport const Toolbar = memo((props: ToolbarProps) => {\n\n    const { pickerProps, column, onColumnChange, onRangeChange } = props;\n\n    return (\n        <div className=\"d-flex flex-wrap\">\n            <div className=\"flex-fill\">\n                <DateRangePicker\n                    {...pickerProps}\n                    onChange={onRangeChange}\n                    format=\"MMM d, y\"\n                />\n            </div>\n            <div className=\"flex-fill\">\n                <select value={column} className=\"form-select\" onChange={(e) => {\n                    onColumnChange(e.target.value as ColumnTypes)\n                }}>\n                    {columns.map(c => (<option key={c} value={c}>{columnTitles[c]}</option>))}\n                </select>\n            </div>\n        </div>\n    );\n});\n","import React, { memo } from 'react';\nimport LoadingBar from 'react-top-loading-bar';\n\ntype ProgressBarProps = {\n    progress: number;\n    dayCount: number;\n    onComplete: () => void;\n};\n\nexport const ProgressBar = memo((props: ProgressBarProps) => {\n\n    const { progress, dayCount, onComplete } = props;\n\n    return (\n        <LoadingBar\n            color='#f11946'\n            progress={(dayCount - progress) / dayCount * 100}\n            onLoaderFinished={onComplete}\n        />\n    );\n});\n","import React, { memo } from 'react';\n\nexport const ForkMe = memo(() => {\n    return (\n        <a className=\"github-fork-ribbon\" href=\"https://github.com/bdkent/sigmausd-history\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\" target=\"_blank\" rel=\"noreferrer\">Fork me on GitHub</a>\n    );\n});\n","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n    Charts,\n    ChartContainer,\n    ChartRow,\n    YAxis,\n    LineChart,\n    Resizable,\n    Baseline,\n    EventMarker,\n\n} from \"react-timeseries-charts\";\nimport { TimeRange } from 'pondjs';\n\nimport { ColumnTypes, columnTitles, columnFormatter } from './columns';\nimport { CrossHairs } from './CrossHairs';\nimport { PickerProps, TimeSeriesData } from '../types';\n\nconst showCrossHair = false;\n\ntype MainChartProps = {\n    timeSeriesData: TimeSeriesData;\n    pickerProps: PickerProps;\n    column: ColumnTypes;\n    chartRowHeight: number;\n};\n\nexport const MainChart = memo((props: MainChartProps) => {\n\n    const { pickerProps, timeSeriesData, column, chartRowHeight } = props;\n\n    const [tracked, setTracked] = useState<Date | undefined>()\n\n    const [selection, setSelection] = useState<unknown>();\n\n    const [mouse, setMouse] = useState<readonly [number, number] | undefined>();\n\n    const [timeRange, setTimeRange] = useState<TimeRange | undefined>(undefined);\n\n    useEffect(() => {\n        setTimeRange(undefined);\n    }, [pickerProps])\n\n    useEffect(() => {\n        if (timeSeriesData) {\n            setTimeRange(new TimeRange(timeSeriesData.start, timeSeriesData.end))\n        } else {\n            setTimeRange(undefined);\n        }\n    }, [timeSeriesData])\n\n    const handleMouseMove = useCallback((x?: number, y?: number) => setMouse(x && y ? [x, y] as const : undefined), []);\n\n    const handleTrackerChanged = useCallback((t: Date) => {\n        setTracked(t)\n        if (!t) {\n            setMouse(undefined);\n        }\n    }, []);\n\n    const handleSelectionChange = useCallback((s: unknown) => setSelection(s), []);\n\n    const eventMarkerProps = useMemo(() => {\n        if (tracked) {\n            return {\n                event: timeSeriesData.timeSeries.atTime(tracked),\n                info: [{ label: columnTitles[column], value: columnFormatter[column](`${timeSeriesData.timeSeries.atTime(tracked).get(column)}`) }] as const,\n            }\n        } else {\n            return undefined;\n        }\n    }, [timeSeriesData, tracked, column]);\n\n    const columns = useMemo(() => [\"time\", column] as const, [column]);\n\n    return (\n        <Resizable>\n            <ChartContainer\n                timeRange={timeRange}\n                maxTime={pickerProps.maxDate}\n                minTime={pickerProps.minDate}\n                timeAxisAngledLabels={true}\n                timeAxisHeight={65}\n                onMouseMove={handleMouseMove}\n                enablePanZoom={true}\n                onTimeRangeChanged={setTimeRange}\n                onTrackerChanged={handleTrackerChanged}\n                minDuration={1000 * 60 * 60}\n            >\n                <ChartRow height={chartRowHeight}>\n                    <YAxis\n                        id=\"y\"\n                        label={columnTitles[column]}\n                        min={timeSeriesData.timeSeries.min(column, (x: unknown) => x)}\n                        max={timeSeriesData.timeSeries.max(column)}\n                        width=\"60\"\n                        type=\"linear\"\n\n                    />\n                    <Charts>\n                        <Baseline axis=\"y\" value={400} label=\"400%\" position=\"left\" />\n                        <Baseline axis=\"y\" value={800} label=\"800%\" position=\"left\" />\n                        <LineChart\n                            axis=\"y\"\n                            breakLine={false}\n                            series={timeSeriesData.timeSeries}\n                            columns={columns}\n                            selection={selection}\n                            onSelectionChange={handleSelectionChange}\n                            interpolation=\"curveBasis\"\n                        />\n                        {tracked ?\n                            <EventMarker\n                                {...eventMarkerProps}\n                                type=\"flag\"\n                                axis=\"y\"\n                                infoWidth={180}\n                                column={column}\n                                markerRadius={3}\n                                markerStyle={{ fill: \"black\" }}\n                            /> : <NullMarker />\n                        }\n                        {showCrossHair && mouse ? <CrossHairs x={mouse[0]} y={mouse[1]} /> : <g />}\n                    </Charts>\n                </ChartRow>\n            </ChartContainer>\n        </Resizable>\n    );\n});\n\nconst NullMarker = memo(() => {\n    return <g />;\n});\n","import './App.scss';\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport 'whatwg-fetch';\nimport { DateTime, } from 'luxon';\nimport range from 'lodash/range';\n\nimport { DataMap, DateRange, Item, PickerProps, Slug } from './types';\nimport { toSlug, nowDateRange, toDay } from './utils';\nimport { loadForDateRange } from './DataService';\nimport { Footer } from './components/Footer';\nimport {  ColumnTypes } from './components/columns';\nimport { Toolbar } from './components/Toolbar';\nimport { ProgressBar } from './components/ProgressBar';\nimport { ForkMe } from './components/ForkMe';\nimport { MainChart } from './components/MainChart';\nimport { useTimeSeriesData } from './hooks/useTimeSeriesData';\n\nconst firstRecord = DateTime.utc(2021, 5, 9, 13, 38)\n\nconst App = (): JSX.Element => {\n\n  const [data, setData] = useState<DataMap>({});\n\n  const [dateRange, setDateRange] = useState<DateRange>(nowDateRange());\n\n  const [progress, setProgress] = useState(0);\n\n  const handleResetProgress = useCallback(() => setProgress(0), [])\n\n  const addNewData = useCallback((slug: Slug, items: Item[]) => {\n    setData(data => ({\n      ...data,\n      [slug]: items,\n    }));\n  }, [])\n\n  const dateDiff = useMemo(() => toDay(dateRange.end).diff(toDay(dateRange.start), 'days').days + 1, [dateRange]);\n\n  useEffect(() => {\n    const nums = range(dateDiff);\n    setProgress(nums.length)\n\n    const dts = nums.map(n => dateRange.start.plus({ days: n }));\n\n    loadForDateRange(dts).subscribe(([date, items]) => {\n      addNewData(toSlug(date), items);\n      setProgress(n => n - 1);\n    })\n\n  }, [addNewData, dateRange, dateDiff]);\n\n  const handleRangeChange = useCallback((dateRange?: [Date, Date]) => {\n    if (!dateRange) {\n      setData({})\n      setDateRange(nowDateRange());\n    } else {\n      const [startDate, endDate] = dateRange;\n      setData({})\n      setDateRange(dr => {\n        const start = DateTime.fromJSDate(startDate)\n        const end = DateTime.fromJSDate(endDate);\n        if (start.equals(dr.start) && end.equals(dr.end)) {\n          return dr;\n        }\n        return {\n          start,\n          end,\n        }\n      })\n    }\n  }, []);\n\n  const timeSeriesData = useTimeSeriesData(data);\n\n  const pickerProps: PickerProps = useMemo(() => ({\n    value: [dateRange.start.toJSDate(), dateRange.end.toJSDate()],\n    maxDate: DateTime.now().toJSDate(),\n    minDate: firstRecord.toJSDate(),\n  }), [dateRange])\n\n  const ref = useRef<HTMLDivElement>(null)\n\n  const [column, setColumn] = useState<ColumnTypes>('reserveRatio')\n\n  return (\n    <div className=\"App container min-vh-100\">\n      <ProgressBar\n        progress={progress}\n        dayCount={dateDiff}\n        onComplete={handleResetProgress}\n      />\n      <ForkMe />\n      <div className=\"d-flex flex-column min-vh-100\">\n        <div>\n          <h1>SigmaUSD History</h1>\n          <Toolbar\n            pickerProps={pickerProps}\n            column={column}\n            onColumnChange={setColumn}\n            onRangeChange={handleRangeChange}\n          />\n          <hr />\n        </div>\n        <div className=\"flex-grow-1 \" ref={ref}>\n          {timeSeriesData && (\n            <MainChart\n              column={column}\n              timeSeriesData={timeSeriesData}\n              pickerProps={pickerProps}\n              chartRowHeight={(ref.current?.offsetHeight ?? 400) * .75}\n            />\n          )}\n        </div>\n        <div>\n          <hr />\n          <Footer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import  { useMemo, } from 'react';\nimport 'whatwg-fetch';\nimport { DateTime, } from 'luxon';\nimport sortBy from 'lodash/sortBy';\nimport { TimeSeries } from 'pondjs';\n\nimport { columns } from '../components/columns';\nimport { DataMap, Item, TimeSeriesData } from '../types';\n\n\ntype Row = Readonly<[\n    date: Date,\n    reserveRatio: number,\n    stable: number,\n    reserve: number,\n    ms: number\n]>;\n\nexport const useTimeSeriesData = (data: DataMap): TimeSeriesData | undefined => {\n\n    return useMemo(() => {\n\n        const slugs = sortBy(Object.keys(data))\n\n        const allItems = slugs.reduce((all: Item[], slug) => {\n            return [...all, ...(data[slug] ?? [])];\n        }, []);\n\n        const divisor = Math.max(Math.ceil(allItems.length / 5000), 1)\n\n        const chartData = allItems.reduce((acc: Readonly<Row>[], item, index) => {\n            if (index % divisor === 0) {\n                const dateTime = DateTime.fromISO(item.time);\n                return [\n                    ...acc,\n                    [\n                        dateTime.toJSDate(),\n                        parseInt(item.reserveRatio, 10),\n                        Math.round(parseFloat(item.stableCoinRatio) * 100) / 100,\n                        parseInt(item.reserveCoinRatio, 10),\n                        dateTime.toMillis(),\n                    ] as const\n                ]\n            } else {\n                return acc;\n            }\n        }, []);\n\n\n        if (!chartData?.length) {\n            return undefined;\n        }\n\n        const points = sortBy(chartData, f => f[4]);\n\n        return {\n            start: points[0]?.[0],\n            end: points[points.length - 1]?.[0],\n            timeSeries: new TimeSeries({\n                name: 'Data',\n                columns: ['time', ...columns],\n                points,\n            })\n        };\n    }, [data]);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}