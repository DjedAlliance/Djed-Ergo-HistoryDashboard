{"version":3,"sources":["utils.ts"," jsstore_con.ts","DataService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nowDateRange","endTime","DateTime","now","toUTC","start","toDay","minus","hours","end","d","utc","year","month","day","todayUTC","toSlug","date","padStart","toString","JsStore","require","workerPath","default","connection","Connection","Worker","load","a","slug","url","process","fetch","resp","json","initDb","name","tables","columns","id","primaryKey","dataType","time","notNull","reserveRatio","stableCoinPrice","stableCoinRatio","reserveCoinPrice","reserveCoinRatio","today","isToday","equals","nextDate","plus","days","minutes","select","from","where","low","toMillis","high","items","length","insert","into","upsert","values","map","i","fromISO","loadForDateRange","dates","Observable","subscriber","queue","PQueue","concurrency","on","next","error","addAll","loadForDate","then","is","complete","initialize","NullMarker","firstRecord","columnTitles","stable","reserve","columnFormatter","v","App","useState","data","setData","dateRange","setDateRange","selection","setSelection","undefined","timeRange","setTimeRange","setMouse","useEffect","progress","setProgress","addNewData","useCallback","dateDiff","useMemo","diff","nums","range","n","subscribe","handleRangeChange","startDate","endDate","dr","fromJSDate","timeSeriesData","allItems","sortBy","Object","keys","reduce","all","divisor","Math","max","ceil","chartData","acc","item","index","dateTime","toJSDate","parseInt","round","parseFloat","points","f","timeSeries","TimeSeries","pickerProps","value","maxDate","minDate","TimeRange","tracked","setTracked","ref","useRef","column","setColumn","tipAddress","addr","document","querySelector","content","includes","className","color","onLoaderFinished","href","data-ribbon","title","target","rel","onChange","format","e","c","maxTime","minTime","timeAxisAngledLabels","timeAxisHeight","onMouseMove","x","y","enablePanZoom","onTimeRangeChanged","onTrackerChanged","t","minDuration","height","current","offsetHeight","label","min","width","type","axis","position","breakLine","series","onSelectionChange","s","interpolation","event","atTime","info","get","infoWidth","markerRadius","markerStyle","fill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4c69620d.chunk.js","sourcesContent":["import { DateTime } from \"luxon\";\nimport { Slug } from \"./types\";\nimport padStart from 'lodash/padStart';\n\nexport function nowDateRange() {\n   const endTime =  DateTime.now().toUTC();\n   const startTime = endTime.minus({hours: 12});\n\n    return {\n        start: toDay(startTime), \n        end: toDay(endTime),\n    };\n}\n\nexport function toDay(d: DateTime): DateTime {\n    return DateTime.utc(d.year, d.month, d.day);\n}\n\nexport function todayUTC() {\n    const now = DateTime.now().toUTC();\n    return toDay(now);\n}\n\nexport function toSlug(date: DateTime): Slug {\n    return `${date.year}-${padStart(date.month.toString(), 2, '0')}-${padStart(date.day.toString(), 2, '0')}`\n}\n","const JsStore = require('jsstore');\n\n/* eslint-disable */\n\n\nconst getWorkerPath = () => {\n\n    // return dev build when env is development\n    if (process.env.NODE_ENV === 'development') {\n\n        return require(\"file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.js\");\n\n    }\n    else { // return prod build when env is production\n\n        return require(\"file-loader?name=scripts/[name].[hash].js!jsstore/dist/jsstore.worker.min.js\");\n\n    }\n};\n\nconst workerPath = getWorkerPath().default;\nexport const connection = new JsStore.Connection(new Worker(workerPath));","\nimport { DateTime } from \"luxon\";\nimport PQueue from \"p-queue/dist/index\";\nimport { Observable } from \"rxjs\"\nimport { connection } from \"./ jsstore_con\";\nimport { Item } from \"./types\";\nimport { todayUTC, toSlug } from \"./utils\";\n\nasync function load(date: DateTime): Promise<Item[]> {\n    const slug = toSlug(date);\n    const url = `${process.env.PUBLIC_URL}/data/daily/${slug}.json`\n    // TODO: validate against schema https://github.com/pelotom/runtypes ?\n    const resp = await fetch(url);\n    return await resp.json();\n}\n\nasync function initialize() {\n    await connection.initDb({\n        name: 'sigmausd',\n        tables: [\n            {\n                name: 'Items',\n                columns: {\n                    id: { primaryKey: true, dataType: \"number\" },\n                    time: { notNull: true, dataType: \"string\" },\n                    reserveRatio: { notNull: true, dataType: \"string\" },\n                    stableCoinPrice: { notNull: true, dataType: \"string\" },\n                    stableCoinRatio: { notNull: true, dataType: \"string\" },\n                    reserveCoinPrice: { notNull: true, dataType: \"string\" },\n                    reserveCoinRatio: { notNull: true, dataType: \"string\" },\n                }\n            },\n        ]\n    });\n\n};\n\ninitialize();\n\n\n\nexport async function loadForDate(date: DateTime): Promise<Item[]> {\n    const today = todayUTC();\n    const isToday = today.equals(date)\n\n    if (!isToday) {\n        // check db\n        const nextDate = date.plus({ days: 1 }).minus({ minutes: 5 })\n\n        const items: Item[] = await connection.select({\n            from: \"Items\",\n            where: {\n                id: {\n                    '-': {\n                        low: date.toMillis(),\n                        high: nextDate.toMillis(),\n                    }\n                },\n            }\n        });\n\n        if (items.length > 0) {\n            return items;\n        }\n\n    }\n\n    const items = await load(date);\n\n    if (!isToday) {\n\n        await connection.insert({\n            into: 'Items',\n            upsert: true,\n            values: items.map(i => ({\n                ...i,\n                id: DateTime.fromISO(i.time).toMillis()\n            }))\n        })\n    }\n\n    return items;\n}\n\ntype DateRangeItems = [DateTime, Item[]]\n\nexport function loadForDateRange(dates: DateTime[]): Observable<DateRangeItems> {\n    return new Observable<DateRangeItems>(subscriber => {\n        const queue = new PQueue({ concurrency: 2 });\n        queue.on('completed', (items: DateRangeItems) => {\n            subscriber.next(items);\n        });\n        queue.on('error', error => {\n            subscriber.error(error);\n        });\n        queue.addAll(dates.map(date => (() => loadForDate(date).then(is => ([date, is] as const)))))\n            .then(() => subscriber.complete())\n    });\n};\n","import './App.scss';\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport 'whatwg-fetch';\nimport { DateTime, } from 'luxon';\nimport sortBy from 'lodash/sortBy';\n\nimport LoadingBar from 'react-top-loading-bar'\nimport { DateRange, Item, Slug } from './types';\nimport { toSlug, nowDateRange, toDay } from './utils';\nimport { loadForDateRange } from './DataService';\nimport range from 'lodash/range';\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  Resizable,\n  Baseline,\n  EventMarker,\n\n} from \"react-timeseries-charts\";\nimport { TimeRange, TimeSeries } from 'pondjs';\nimport { CrossHairs } from './components/CrossHairs';\n\nconst NullMarker = () => {\n  return <g />;\n};\n\nconst firstRecord = DateTime.utc(2021, 5, 9, 13, 38)\n\nconst columns = ['reserveRatio', 'stable', 'reserve'] as const\ntype ColumnTypes = typeof columns[number];\n\nconst columnTitles = {\n  reserveRatio: 'Reserve Ratio (%)',\n  stable: 'SigmaUSD Ratio ($)',\n  reserve: 'SigmaRSV Ratio',\n} as const;\n\nconst columnFormatter = {\n  reserveRatio: (v: string) => `${v} %`,\n  stable: (v: string) => `$${v}`,\n  reserve: (v: string) => v,\n} as const;\n\nconst showCrossHair = false;\n\nconst App = (): JSX.Element => {\n\n  const [data, setData] = useState<{ [slug: string]: Item[] | undefined }>({});\n\n  const [dateRange, setDateRange] = useState<DateRange>(nowDateRange());\n\n  const [selection, setSelection] = useState<unknown>();\n\n\n  const [timeRange, setTimeRange] = useState<TimeRange | undefined>(undefined);\n\n  const [mouse, setMouse] = useState<readonly [number, number] | undefined>();\n\n  useEffect(() => {\n    setTimeRange(undefined);\n  }, [dateRange])\n\n  const [progress, setProgress] = useState(0);\n\n\n  const addNewData = useCallback((slug: Slug, items: Item[]) => {\n    setData(data => ({\n      ...data,\n      [slug]: items,\n    }));\n  }, [])\n\n  const dateDiff = useMemo(() => toDay(dateRange.end).diff(toDay(dateRange.start), 'days').days + 1, [dateRange]);\n\n  useEffect(() => {\n    const nums = range(dateDiff);\n    setProgress(nums.length)\n\n    const dts = nums.map(n => dateRange.start.plus({ days: n }));\n\n    loadForDateRange(dts).subscribe(([date, items]) => {\n      addNewData(toSlug(date), items);\n      setProgress(n => n - 1);\n    })\n\n  }, [addNewData, dateRange, dateDiff]);\n\n  const handleRangeChange = useCallback((dateRange?: [Date, Date]) => {\n    if (!dateRange) {\n      setData({})\n      setDateRange(nowDateRange());\n    } else {\n      const [startDate, endDate] = dateRange;\n      setData({})\n      setDateRange(dr => {\n        const start = DateTime.fromJSDate(startDate)\n        const end = DateTime.fromJSDate(endDate);\n        if (start.equals(dr.start) && end.equals(dr.end)) {\n          return dr;\n        }\n        return {\n          start,\n          end,\n        }\n\n      })\n    }\n  }, [])\n\n  type Row = Readonly<[\n    date: Date,\n    reserveRatio: number,\n    stable: number,\n    reserve: number,\n    ms: number\n  ]>\n\n  const timeSeriesData = useMemo(() => {\n\n    const slugs = sortBy(Object.keys(data))\n\n    const allItems = slugs.reduce((all: Item[], slug) => {\n      return [...all, ...(data[slug] ?? [])];\n    }, []);\n\n    const divisor = Math.max(Math.ceil(allItems.length / 5000), 1)\n\n    const chartData = allItems.reduce((acc: Readonly<Row>[], item, index) => {\n      if (index % divisor === 0) {\n        const dateTime = DateTime.fromISO(item.time);\n        return [\n          ...acc,\n          [\n            dateTime.toJSDate(),\n            parseInt(item.reserveRatio, 10),\n            Math.round(parseFloat(item.stableCoinRatio) * 100) / 100,\n            parseInt(item.reserveCoinRatio, 10),\n            dateTime.toMillis(),\n          ] as const\n        ]\n      } else {\n        return acc;\n      }\n    }, []);\n\n\n    if (!chartData?.length) {\n      return undefined;\n    }\n\n    const points = sortBy(chartData, f => f[4]);\n\n    return {\n      start: points[0]?.[0],\n      end: points[points.length - 1]?.[0],\n      timeSeries: new TimeSeries({\n        name: 'Data',\n        columns: ['time', ...columns],\n        points,\n      })\n    };\n  }, [data]);\n\n  const pickerProps = useMemo(() => ({\n    value: [dateRange.start.toJSDate(), dateRange.end.toJSDate()],\n    maxDate: DateTime.now().toJSDate(),\n    minDate: firstRecord.toJSDate(),\n  }), [dateRange])\n\n  useEffect(() => {\n    if (timeSeriesData) {\n      setTimeRange(new TimeRange(timeSeriesData.start, timeSeriesData.end))\n    } else {\n      setTimeRange(undefined);\n    }\n  }, [timeSeriesData])\n\n  const [tracked, setTracked] = useState<Date | undefined>()\n\n  const ref = useRef<HTMLDivElement>(null)\n\n  const [column, setColumn] = useState<ColumnTypes>('reserveRatio')\n\n  const tipAddress = useMemo(() => {\n    const addr = document.querySelector<HTMLMetaElement>('meta[name=tip]')?.content;\n    return addr?.includes('REACT_APP_TIP') ? undefined : addr;\n  }, []);\n\n  return (\n    <div className=\"App container min-vh-100\">\n      <LoadingBar\n        color='#f11946'\n        progress={(dateDiff - progress) / dateDiff * 100}\n        onLoaderFinished={() => setProgress(0)}\n      />\n      <a className=\"github-fork-ribbon\" href=\"https://github.com/bdkent/sigmausd-history\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\" target=\"_blank\" rel=\"noreferrer\">Fork me on GitHub</a>\n      <div className=\"d-flex flex-column min-vh-100\">\n        <div>\n          <h1>SigmaUSD History</h1>\n\n          <div className=\"d-flex flex-wrap\">\n            <div className=\"flex-fill\">\n              <DateRangePicker\n                {...pickerProps}\n                onChange={handleRangeChange}\n                format=\"MMM d, y\"\n              />\n            </div>\n            <div className=\"flex-fill\">\n              <select value={column} className=\"form-select\" onChange={(e) => {\n                setColumn(e.target.value as ColumnTypes)\n              }}>\n                {columns.map(c => (<option key={c} value={c}>{columnTitles[c]}</option>))}\n              </select>\n            </div>\n          </div>\n          <hr />\n        </div>\n        <div className=\"flex-grow-1 \" ref={ref}>\n          {timeSeriesData && (\n            <Resizable>\n              <ChartContainer\n                timeRange={timeRange}\n\n                maxTime={pickerProps.maxDate}\n                minTime={pickerProps.minDate}\n                timeAxisAngledLabels={true}\n                timeAxisHeight={65}\n                onMouseMove={(x?: number, y?: number) => setMouse(x && y ? [x, y] as const : undefined)}\n                enablePanZoom={true}\n                onTimeRangeChanged={setTimeRange}\n                onTrackerChanged={(t: Date) => {\n                  setTracked(t)\n                  if (!t) {\n                    setMouse(undefined);\n                  }\n                }}\n                minDuration={1000 * 60 * 60}\n              >\n                <ChartRow height={(ref.current?.offsetHeight ?? 400) * .75}>\n                  <YAxis\n                    id=\"y\"\n                    label={columnTitles[column]}\n                    min={timeSeriesData.timeSeries.min(column, (x: unknown) => x)}\n                    max={timeSeriesData.timeSeries.max(column)}\n                    width=\"60\"\n                    type=\"linear\"\n\n                  />\n                  <Charts>\n                    <Baseline axis=\"y\" value={400} label=\"400%\" position=\"left\" />\n                    <Baseline axis=\"y\" value={800} label=\"800%\" position=\"left\" />\n                    <LineChart\n                      axis=\"y\"\n                      breakLine={false}\n                      series={timeSeriesData.timeSeries}\n                      columns={[\"time\", column]}\n                      selection={selection}\n                      onSelectionChange={(s: unknown) =>\n                        setSelection(s)\n                      }\n                      interpolation=\"curveBasis\"\n\n                    />\n                    {tracked ?\n                      <EventMarker\n                        type=\"flag\"\n                        axis=\"y\"\n                        event={timeSeriesData.timeSeries.atTime(tracked)}\n                        info={[{ label: columnTitles[column], value: columnFormatter[column](`${timeSeriesData.timeSeries.atTime(tracked).get(column)}`)}]}\n                        infoWidth={180}\n                        // markerLabel={columnFormatter[column](`${timeSeriesData.timeSeries.atTime(tracked).get(column)}`)}\n                        column={column}\n                        markerRadius={3}\n                        // markerLabelAlign=\"left\"\n                        markerStyle={{ fill: \"black\" }}\n                      /> : <NullMarker />\n                    }\n                    {showCrossHair && mouse ? <CrossHairs x={mouse[0]} y={mouse[1]} /> : <g />}\n                  </Charts>\n                </ChartRow>\n              </ChartContainer>\n            </Resizable>\n          )}\n\n        </div>\n        <div>\n          <hr />\n          <footer className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container-fluid\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a href=\"http://sigmausd.io\" className=\"nav-link\" target=\"_blank\" rel=\"noreferrer\">sigmausd.io</a>\n                </li>\n              </ul>\n              {tipAddress && <a href={`https://explorer.ergoplatform.com/en/addresses/${tipAddress}`} target=\"_blank\" rel=\"noreferrer\">&hearts; donations</a>}\n            </div>\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}