{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadForDate","date","a","slug","toSlug","url","process","fetch","resp","json","year","padStart","month","toString","day","App","useState","data","setData","now","DateTime","toUTC","start","end","nowDateRange","dateRange","setDateRange","addNewData","useCallback","items","useEffect","startSlug","endSlug","load","handleLoadPrevious","dr","minus","Duration","fromObject","days","chartData","useMemo","slugs","sortBy","Object","keys","reduce","all","acc","item","index","Math","pow","length","label","fromISO","time","toLocaleString","DATETIME_SHORT","reserveRatio","parseInt","stable","round","parseFloat","stableCoinRatio","reserve","reserveCoinRatio","className","href","data-ribbon","title","target","rel","DATE_FULL","equals","onClick","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","ReferenceArea","y1","y2","fill","opacity","alwaysShow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Chart","register","annotationPlugin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b98fab3d.chunk.js","sourcesContent":["import './App.scss';\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport 'whatwg-fetch';\nimport { DateTime, Duration } from 'luxon';\nimport padStart from 'lodash/padStart';\nimport sortBy from 'lodash/sortBy';\nimport { LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Line, ResponsiveContainer, ReferenceArea } from 'recharts'\n\ntype Item = {\n  \"time\": string;\n  \"reserveRatio\": string;\n  \"stableCoinPrice\": string;\n  \"stableCoinRatio\": string;\n  \"reserveCoinPrice\": string;\n  \"reserveCoinRatio\": string;\n}\n\ntype DateRange = {\n  start: DateTime;\n  end: DateTime;\n}\n\nfunction nowDateRange() {\n  const now = DateTime.now().toUTC();\n  return {\n    start: now, end: now\n  };\n}\n\nasync function loadForDate(date: DateTime) {\n  const slug = toSlug(date);\n  const url = `${process.env.PUBLIC_URL}/data/daily/${slug}.json`\n  const resp = await fetch(url);\n  return await resp.json();\n}\n\nfunction toSlug(date: DateTime): Slug {\n  return `${date.year}-${padStart(date.month.toString(), 2, '0')}-${padStart(date.day.toString(), 2, '0')}`\n}\n\ntype Slug = string\n\nfunction App(): JSX.Element {\n\n  const [data, setData] = useState<{ [slug: string]: Item[] | undefined }>({});\n\n  const [dateRange, setDateRange] = useState<DateRange>(nowDateRange());\n\n  const addNewData = useCallback((slug: Slug, items: Item[]) => {\n    setData(data => ({\n      ...data,\n      [slug]: items,\n    }));\n  }, [])\n\n  useEffect(() => {\n    const startSlug = toSlug(dateRange.start);\n    const endSlug = toSlug(dateRange.end)\n\n    const load = async () => {\n      if (!data[startSlug]) {\n        addNewData(startSlug, await loadForDate(dateRange.start));\n      }\n      if (startSlug !== endSlug && !data[endSlug]) {\n        addNewData(endSlug, await loadForDate(dateRange.end));\n      }\n    }\n\n    load();\n  }, [addNewData, dateRange, data]);\n\n  const handleLoadPrevious = useCallback(() => {\n    setDateRange(dr => {\n      if (data[toSlug(dr.start)]) {\n        return {\n          ...dr,\n          start: dr.start.minus(Duration.fromObject({ days: 1, }))\n        };\n      } else {\n        return dr;\n      }\n    })\n  }, [data])\n\n  type ChartData = {\n    label: string;\n    reserveRatio: number;\n  }\n\n  const chartData = useMemo(() => {\n\n    const slugs = sortBy(Object.keys(data))\n\n    const allItems = slugs.reduce((all: Item[], slug) => {\n      return [...all, ...(data[slug] ?? [])];\n    }, []);\n\n    return allItems.reduce((acc: ChartData[], item, index) => {\n      if (index % Math.pow(slugs.length, 2) === 0) {\n        return [\n          ...acc,\n          {\n            label: DateTime.fromISO(item.time).toLocaleString(DateTime.DATETIME_SHORT),\n            reserveRatio: parseInt(item.reserveRatio, 10),\n            stable: Math.round(parseFloat(item.stableCoinRatio) * 100) / 100,\n            reserve: parseInt(item.reserveCoinRatio, 10),\n\n          }\n        ]\n      } else {\n        return acc;\n      }\n\n    }, []);\n  }, [data]);\n\n\n\n  return (\n    <div className=\"App container\">\n      <a className=\"github-fork-ribbon\" href=\"https://github.com/bdkent/sigmausd-history\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\" target=\"_blank\" rel=\"noreferrer\">Fork me on GitHub</a>\n      <h1>SigmaUSD History</h1>\n\n      <h2>\n        {dateRange.start.toLocaleString(DateTime.DATE_FULL)}{!dateRange.start.equals(dateRange.end) && <>{' '}â€”{' '}{dateRange.end.toLocaleString(DateTime.DATE_FULL)}</>}\n      </h2>\n      <button className=\"btn btn-primary\" onClick={handleLoadPrevious}>Load Previous Day</button>\n\n      <hr />\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\" card text-dark bg-light mb-3\" >\n            <div className=\"card-header\">Reserve Ratio (%)</div>\n            <div className=\"card-body \">\n              <div className=\"reserveRatioChartWrapper\">\n                {chartData && (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <LineChart width={730} height={250} data={chartData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"label\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"reserveRatio\" stroke=\"#8884d8\" />\n                      <ReferenceArea y1={400} y2={800} fill=\"green\" opacity={.25} alwaysShow />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\" card text-dark bg-light mb-3\" >\n            <div className=\"card-header\">SigmaUSD ($)</div>\n            <div className=\"card-body \">\n              <div className=\"reserveRatioChartWrapper\">\n                {chartData && (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <LineChart width={730} height={250} data={chartData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"label\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"stable\" stroke=\"#8884d8\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\" card text-dark bg-light mb-3\" >\n            <div className=\"card-header\">SigmaRSV</div>\n            <div className=\"card-body \">\n              <div className=\"reserveRatioChartWrapper\">\n                {chartData && (\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <LineChart width={730} height={250} data={chartData}\n                      margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"label\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"reserve\" stroke=\"#8884d8\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n      <footer className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container-fluid\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a href=\"http://sigmausd.io\" className=\"nav-link\">sigmausd.io</a>\n            </li>\n          </ul>\n        </div>\n      </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Chart } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\n\nChart.register(annotationPlugin);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}